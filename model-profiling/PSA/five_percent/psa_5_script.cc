/**
 * @author: Akira Yoshiyama
 * @date: 28/02/2024
 * @description: Positive Selection Algorithm for Network Attack Detection with 100 detectors
*/

/**
 * Params to be hardcoded by user:
 *      Class Detectors: num_detectors, num_features, array_ capacity, array_
 *      float* scaler(): mean, std_dev, mean length, std_dev length
 *      bool psa(): radius
 *      int main(): dummy attack vector length
*/

/** 
 * @brief       Interface for detectors array
*/
class Detectors {
    public:
        Detectors();
        ~Detectors();
        float get(short, short);
        unsigned short get_num_dtrs() {
            return num_detectors;
        }
        unsigned short get_num_feats() {
            return num_features;
        }

    private:
        // Harcoded
        unsigned short num_detectors{100};
        unsigned short num_features{5};
        // num_detectors * num_features
        float detectorsArray_[500]{-4.880319, 1.3629826, -0.18915486, 1.9758674, -0.22134511, -4.880319, 0.2952493, 6.9252443, 1.1017035, 10.839559, -4.880319, 0.8907637, 2.9488938, 1.3982396, 2.7927132, -4.880319, 3.3491075, 6.8057394, 4.308, 14.803495, -4.880319, 4.321138, 5.0628195, 6.065594, 16.098263, -4.880319, 0.22689614, 3.821583, 0.30476284, 3.0969262, 4.888971, 1.7491657, 1.0374858, 3.9126186, 1.563066, -4.880319, 2.2596939, 4.8386846, 3.146567, 5.309107, -4.880319, 0.14636202, 4.36934, 0.34491876, 5.1105, 4.889276, 0.07006711, 0.33205333, 1.8801109, 0.09184347, -4.880319, 4.712992, 4.562486, 6.893424, 2.543881, -4.880319, 0.06656014, 2.4873934, 0.2120953, 3.6499712, -4.880319, 7.893136, 4.2494903, 10.6557255, 5.309107, -4.880319, 4.6748915, 5.6345735, 5.7443466, 5.309107, 4.889019, 0.31378365, 1.3776813, 0.5086314, 3.7412543, -4.880319, -0.085897125, -0.011859708, 0.6167435, -0.01700866, -4.880319, 3.5262918, 4.8969874, 4.8547387, 5.032584, 4.8892593, 0.7863349, 3.2602582, 0.86076796, 2.543881, 4.888929, 5.417329, 4.7132173, 5.0153623, 5.1105, -4.880319, -0.14415094, 0.60954815, 0.08544968, 0.08878796, -4.880319, 4.8079257, 0.610651, 6.8007565, 1.9908358, 4.888911, 0.8784024, 4.33292, 1.1665708, 7.521288, 4.8891287, 2.6283116, 1.0001686, 5.657857, 2.543881, -4.880319, 1.608948, 0.78244716, 2.6708739, 1.5502712, -4.880319, 0.0137145175, -0.16069685, 1.3210167, -0.088430926, 4.889154, 9.143022, 2.5494323, 12.654255, 8.074332, -4.880319, 1.1076696, -0.18915486, 1.7843544, -0.22134511, 4.8890977, -0.13970315, 1.5978326, -0.031929184, 2.2679312, -4.880319, 0.24936113, 0.95289963, 0.52716494, 0.9993266, -4.880319, 8.845428, 5.350089, 12.017939, 5.032584, 4.8889427, -0.050927453, 0.10226527, 0.80207855, 0.061288483, 4.8890452, -0.0410758, -0.12532832, 0.7804562, -0.049473334, -4.880319, 0.85226315, -0.19043621, 1.3395503, -0.22134511, 4.8888845, 0.41017947, -0.114584476, 0.72485566, -0.08384769, -4.880319, 1.5567999, 0.2126361, 2.5720284, 0.37829643, 4.8887334, 5.907335, 0.63062716, 6.871802, 2.555339, -4.880319, 1.4206802, 4.2209125, 1.7441986, 2.543881, 4.889146, -0.08162967, 0.16525133, 0.62292135, 0.032643188, -4.880319, 4.1187077, 4.7946925, 5.3798547, 3.9264941, 4.888993, 2.1742318, 3.8447778, 2.8994536, 8.074332, 4.8892846, 0.24117169, 0.32399812, 1.5248853, 1.3083138, 4.8890967, -0.13533792, 0.8802208, -0.06590728, 1.2619084, 4.8888497, 14.472407, 5.612485, 19.922478, 5.309107, -4.880319, 6.8182955, 3.5824406, 9.021688, 2.2782435, -4.880319, 5.828958, 4.492287, 8.752953, 2.543881, -4.880319, 0.31846827, 1.0825261, 0.69087756, 0.7579421, 4.889153, 1.1240376, -0.030501725, 1.6082861, 0.11915199, -4.880319, -0.14219539, 0.24265997, 0.14413913, 0.07121885, 4.8889465, 0.014598863, 0.6862497, 0.87003475, 1.1288033, -4.880319, 3.9178917, 0.41127098, 5.339699, 0.2814753, -4.880319, 4.4012747, -0.1835216, 6.1767955, -0.2104599, -4.880319, 0.9085136, -0.057453815, 1.5712191, -0.13540922, -4.880319, 0.11592489, 0.26621452, 2.2075362, 0.48810342, -4.880319, 7.789144, -0.056496453, 11.208642, -0.08384769, 4.8888717, 0.54775065, 4.1585712, 0.8298788, 8.074332, 4.8887935, 1.3193325, 1.2098182, 2.1086907, 2.9796712, -4.880319, 0.44933623, 0.068482496, 1.2407049, -0.034959704, 4.8892064, 0.54760504, 7.0604715, 0.91945744, 16.370012, -4.880319, 1.9975712, 0.08031705, 2.816053, -0.018918347, 4.8888817, 1.8014941, 1.3476938, 4.1041317, 2.5496101, 4.889189, 12.960253, 4.4128737, 17.667568, 8.074332, 4.8892713, 2.8176615, 4.3270273, 3.9651303, 5.309107, -4.880319, 0.4897119, 1.8117672, 0.77736723, 3.1973755, 4.8888474, 2.6889381, -0.07974261, 3.5543044, 0.01278246, 4.889263, 1.1264017, 5.325589, 1.3827951, 5.309107, -4.880319, -0.15528674, -0.06751584, -0.016484596, -0.073153436, 4.8887815, -0.14229535, 0.19312464, 0.10398319, 0.2213202, 4.8888445, -0.1646669, 0.10094301, -0.09370754, -0.06475083, -4.880319, 5.8941197, 3.5619023, 8.21857, 5.3969526, -4.880319, 0.51762205, 0.06100815, 1.0615476, -0.08384769, -4.880319, -0.1104589, -0.23470563, 0.32947418, -0.1567977, 4.889107, 0.12215659, 3.8045275, 0.2460734, 5.309107, 4.8891325, 0.8999809, -0.0074654417, 1.19746, 0.06892723, 4.889077, 0.018390467, 0.982747, 0.15958372, 2.543881, 4.889031, 3.5144086, 2.1964087, 5.129652, 5.4699025, -4.880319, -0.037162516, 0.6289833, 1.157304, 0.40655977, -4.880319, 2.238576, -0.1493591, 3.1434782, -0.002495032, 4.8890047, 3.8894818, 3.3239775, 5.10803, 10.839559, -4.880319, 0.32715964, 0.021216378, 2.3558042, -0.099316165, -4.880319, -0.06741496, 0.46913043, 0.66925514, 0.3756229, -4.880319, 0.027388195, -0.18915486, 0.15031695, -0.22134511, -4.880319, 0.56760824, 4.7316556, 1.9357114, 6.7432814, 4.889086, 7.057336, 3.2819655, 10.149143, 2.543881, 4.889002, 0.79222107, 0.3074106, 1.0893478, 0.47358978, -4.880319, 0.71786004, 5.3130274, 0.91945744, 5.032584, 4.8892293, 1.4045143, 2.6374357, 1.9480671, 5.309107, 4.8889737, 4.2716713, 1.8933226, 5.6084347, 5.309107, 4.8887362, 1.1764857, 0.40300635, 3.5790155, 0.886273, 4.888988, 0.35446787, -0.1234168, 0.6105657, -0.049473334, -4.880319, 2.403629, 3.5397363, 4.607625, 4.4967265, -4.880319, 0.017395306, 0.23309985, 1.0337473, 0.035316736, 4.88925, 10.564334, 4.6637383, 14.161647, 5.309107, -4.880319, 0.98037815, 6.721345, 2.8438532, 16.923056, -4.880319, 0.61236864, 0.02445093, 0.9379909, 0.31222126, 4.8887825, 1.4320006, 3.5560524, 2.3156483, 5.1105, 4.888803, 0.09251254, 0.6290269, 0.21518421, 1.1095155, 4.889052, 0.17002858, 2.898131, 0.36036333, 5.309107, 4.889181, 11.492178, 6.8070974, 15.736995, 24.66569, -4.880319, 1.9433872, -0.012658947, 3.3597023, -0.03305002, 4.889219, -0.16157712, 1.5117147, -0.087529704, 5.309107};
};

/**
 * @brief               Empty constructor for Detectors class.
*/
Detectors::Detectors() {
}

/**
 * @brief               Destructor for Detectors class. Sets num_detectors = num_features = 0.
*/
Detectors::~Detectors() {
    num_detectors = 0;
    num_features = 0;
}

/**
 * @brief               Read one feature value from one detector.
 * @param detector      Index of detector. Range: 0 to num_detectors - 1.
 * @param feature       Index of feature. Range: 0 to num_features - 1.
 * @returns             Float of feature
*/
float Detectors::get(short detector, short feature) {
    return detectorsArray_[detector*num_features + feature];
}

/**
 * @brief               Scales all features of incoming network request. Modelled after sklearn StandardScaler().
 * @param request       Array of features of incoming network request.
 * @param cap           Capacity of network request feature array.
 * @returns             Scaled features array
*/
float* scaler(float request[], short cap) {

    // Hardcoded Mean and Standard Deviation
    // Get from StandardScaler() in Kaggle notebook
    double mean[5]{8.3186720e+07, 7.6719203e+04, 1.3120520e+01, 3.8336689e+01, 1.8190652e+02};
    double std_dev[5]{2.9054373e+14, 2.1180917e+11, 7.4384621e+01, 1.0480629e+05, 2.7420531e+05};

    for (short i{0}; i < cap; i++) {
        request[i] = (request[i] - ((float) mean[i]))/ ((float) std_dev[i]);
    }

    return request;
}


/**
 * @brief              Absolute value function
*/
float abs(float x) {
    if (x < 0) {
        return -x;
    }
    return x;
}

/**
 * @brief               Predicts if cyberattack or benign
 * @param attack        Feature array from incoming network request
 * @param D             Class holding detectors
 * @returns             True if Attack
*/
bool psa(float attack[], Detectors D) {
    float r{3.5}; //Hardcoded radius value
    float dist{0.0};
    
    float* scaled_attack = scaler(attack, D.get_num_feats());
    for (unsigned int d{0}; d < D.get_num_dtrs(); d++) {
        dist = 0.0;
        for (short f{0}; f < D.get_num_feats(); f++) {
            dist += abs(scaled_attack[f] - D.get(d, f));
        }
        if (dist < r) {
            return false;
        }
    }

    return true;
}

/**
 * @brief               Tests PSA on dummy attack vector
*/
int main() {

    while (true) {
        Detectors D;    
    
        float dummy_attack_vector[5];
        for (short i{0}; i < D.get_num_feats(); i++) {
            dummy_attack_vector[i] = (float) i;
        }

        bool is_attack = psa(dummy_attack_vector, D);

    }

    return 0;
}