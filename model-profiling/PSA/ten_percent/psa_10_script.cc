/**
 * @author: Akira Yoshiyama
 * @date: 28/02/2024
 * @description: Positive Selection Algorithm for Network Attack Detection with 100 detectors
*/

/**
 * Params to be hardcoded by user:
 *      Class Detectors: num_detectors, num_features, array_ capacity, array_
 *      float* scaler(): mean, std_dev, mean length, std_dev length
 *      bool psa(): radius
 *      int main(): dummy attack vector length
*/

/** 
 * @brief       Interface for detectors array
*/
class Detectors {
    public:
        Detectors();
        ~Detectors();
        float get(short, short);
        unsigned short get_num_dtrs() {
            return num_detectors;
        }
        unsigned short get_num_feats() {
            return num_features;
        }

    private:
        // Harcoded
        unsigned short num_detectors{100};
        unsigned short num_features{5};
        // num_detectors * num_features
        float detectorsArray_[500]{4.889306, 2.5964565, 0.12417007, 3.3644116, 0.48696646, -4.8793077, -0.04975809, 0.6194313, 1.0920527, 0.06682464, -4.8793077, 8.36442, 4.8229885, 11.129843, 2.5437517, -4.8793077, 0.63887566, 0.051973466, 1.8556638, -0.04966923, 4.889609, -0.1161682, 0.009219269, 0.1960414, 0.061095435, 4.889641, 2.064837, 4.423764, 2.791703, 5.3090487, -4.8793077, 2.3473709, 0.12715054, 3.832431, 0.0057131015, -4.8793077, -0.09079334, 1.4791089, 0.13445987, 1.6083632, 4.8896756, 1.597969, 0.59308195, 2.8963916, 1.2470412, -4.8793077, 0.6646543, 1.5749589, 0.7102472, 3.9264002, 4.8893323, 2.0708828, 2.7098613, 3.7277424, 4.8850875, 4.8894253, 9.229215, 4.6771154, 12.653986, 5.3090487, -4.8793077, 0.11248778, 5.140407, 0.1960414, 3.9264002, -4.8793077, 8.526655, 2.3346899, 11.767212, 2.565523, -4.8793077, 4.249845, 6.817017, 6.000101, 10.563114, -4.8793077, 2.615471, -0.17144145, 4.057204, -0.18105905, -4.8793077, 14.796024, 1.8384824, 20.690376, 1.7141626, -4.8793077, -0.033839375, -0.021304827, 1.1074481, -0.025988521, 4.8895497, 1.8410871, 4.5924993, 2.4807162, 5.3090487, -4.8793077, -0.122606896, 0.40011546, 0.22991125, 0.020990986, 4.889473, 0.18699943, -0.093707256, 2.988764, -0.041648347, 4.8892393, -0.073059805, 0.67724097, 0.59016323, 1.5373211, -4.8793077, 0.16264486, 0.0052879215, 3.5368397, -0.105242535, 4.8893104, 1.8137412, -0.032535106, 3.866301, 0.11781458, -4.8793077, 6.4035306, 1.6326461, 8.999122, 3.096811, 4.8893895, -0.12560265, 0.5770176, 0.18064602, 0.3112708, 4.8896933, -0.08695531, 0.14998649, 0.6517448, 0.050018962, -4.8793077, 10.924735, 0.864781, 14.97253, 0.3620698, 4.8896027, 0.8711092, -0.057261664, 1.627812, -0.046040744, -4.8793077, -0.15447907, 0.43139723, -0.031810272, 0.053838436, -4.8793077, 0.039026793, 0.1689965, 1.5323607, -0.00670018, -4.8793077, -0.1346181, -0.11343547, -0.084154576, -0.0044085034, -4.8793077, 1.8150958, 0.60021347, 2.511507, 1.0064145, -4.8793077, 0.019767167, -0.07412951, 1.1382389, -0.04241223, -4.8793077, -0.14750852, -0.16347612, -0.007177658, -0.13904487, 4.8895574, -0.16207698, 0.2349698, -0.09647088, 1.3073889, -4.8793077, 2.6768446, 6.1353254, 4.152655, 6.142648, 4.8893313, 3.2759879, -0.046224393, 4.980927, 0.061095435, -4.8793077, 1.4617038, 1.319333, 2.3267624, 2.071283, -4.8793077, 0.42583662, -0.18922736, 0.98120594, -0.22154543, -4.8793077, 5.9736624, -0.18922736, 7.921445, -0.22154543, -4.8793077, 1.8923601, -0.17071517, 3.0441873, -0.1871702, -4.8793077, 2.6260123, -0.22558579, 3.666161, -0.2238371, 4.889305, 0.28460875, -0.14851026, 0.5840051, -0.108489096, 4.8895445, 1.1032754, 0.911065, 1.5477561, 2.3718755, 4.8893986, 0.3345227, -0.1086329, 1.5723886, -0.03362746, 4.8892183, 0.43397072, 3.5153713, 0.7718288, 5.1104364, 4.889221, 3.6137521, 2.3751767, 5.024034, 8.074347, 4.889283, 0.9570025, -0.12769428, 1.4369093, 0.15276276, 4.889438, 0.50346774, 6.6482735, 0.5963214, 10.8396435, -4.8793077, 0.47560945, 0.43495196, 3.3921232, 0.22036737, 4.889593, 6.4433804, 4.537585, 8.829773, 5.3090487, -4.8793077, 4.6960425, 3.110633, 6.514307, 2.036144, -4.8793077, -0.12180803, -0.0009509736, 0.21451586, -0.0462317, -4.8793077, -0.10396595, 0.30255485, 0.36231154, 0.30573258, -4.8793077, 0.22599192, -0.23517601, 0.20527864, -0.16960064, 4.8897233, 8.372656, 4.5327888, 11.136001, 5.3090487, -4.8793077, -0.15566868, 0.13241524, -0.019493965, 0.043525875, -4.8793077, 0.09134604, 3.9088972, 0.24530663, 5.3090487, 4.8894634, 0.0038875265, 4.981414, 0.0913528, 8.074347, 4.889469, 0.74974227, -0.20558955, 0.86112195, -0.22154543, -4.8793077, 5.7721634, 5.1415143, 8.164692, 5.032519, -4.8793077, 1.2937074, -0.18922736, 1.6801564, -0.22154543, -4.8793077, 0.6326996, 2.847373, 0.7872242, 2.267222, -4.8793077, 6.297676, 5.6024146, 9.03915, 5.3090487, -4.8793077, 0.26945633, 6.0756173, 0.4362094, 5.032519, -4.8793077, -0.016448833, 0.019969301, 0.83341026, -0.006509195, 4.889686, 1.7884119, 6.2315693, 2.2928927, 27.056927, 4.8892775, 0.820112, 1.3619535, 1.3814859, 3.2599027, -4.8793077, 1.9887754, 3.8284452, 2.797861, 3.099485, 4.889593, 0.03742472, 0.2711266, 1.7294216, 0.08248447, 4.889306, 2.57363, -0.15711227, 4.426693, -0.08404447, -4.8793077, -0.1161313, 0.45276627, 0.26686016, 0.06873438, 4.8893886, -0.1529877, -0.16815197, -0.044126578, -0.07984306, -4.8793077, 0.15222703, -0.18922736, 0.74719614, -0.22154543, 4.889664, 2.2838392, 2.3155458, 3.179667, 5.3090487, 4.889261, 1.7933419, 4.1015487, 2.4684, 8.074347, 4.8894925, 7.636025, -0.13374835, 11.659444, -0.04966923, 4.8895864, 0.7927074, 1.6624627, 0.984285, 2.5437517, -4.8793077, 2.6609974, 0.3969704, 4.1187854, 0.6298147, -4.8793077, 1.2452087, -0.1378979, 2.7024097, -0.13560733, 4.8891892, -0.16077664, 0.3753782, -0.06875919, 0.7447808, 4.889625, 10.897267, 2.5162725, 14.874001, 2.5437517, -4.8793077, 3.9104745, 3.8273087, 5.4027605, 2.2844095, 4.889166, -0.09304015, -0.1487174, 0.014375879, -0.04241223, -4.8793077, 0.084814005, 0.07524813, 0.3961814, -0.027516287, 4.8896766, -0.14834863, 0.2385421, 0.011296802, 0.36245167, 4.8892384, 0.73090595, -0.108435035, 1.6185749, -0.04966923, 4.8895583, 2.7238626, 1.5866383, 3.706189, 2.8829207, -4.8793077, 0.6745815, 1.0696295, 2.1389387, 1.0587415, -4.8793077, -0.11063475, -0.3039519, 0.49471188, -0.20359391, -4.8793077, 1.9869866, 0.1655571, 3.025713, -0.05272482, -4.8793077, 0.8828013, 5.10796, 0.8672801, 5.1104364, -4.8793077, 3.6330051, 1.66428, 5.097932, 2.3103821, -4.8793077, 7.663838, 3.573366, 11.881138, 2.5437517, 4.8893723, 0.17682908, 0.1963437, 3.3274627, 0.10119988, 4.889656, 9.081539, 4.7930636, 12.57393, 5.3090487, 4.8893905, -0.09030056, -0.043639217, 0.5101073, 0.0030394834, -4.8793077, 2.4791381, 3.5596278, 3.4875746, 2.267222, 4.8896036, -0.11926164, 1.1362823, 0.45468387, 3.4508762};
};

/**
 * @brief               Empty constructor for Detectors class.
*/
Detectors::Detectors() {
}

/**
 * @brief               Destructor for Detectors class. Sets num_detectors = num_features = 0.
*/
Detectors::~Detectors() {
    num_detectors = 0;
    num_features = 0;
}

/**
 * @brief               Read one feature value from one detector.
 * @param detector      Index of detector. Range: 0 to num_detectors - 1.
 * @param feature       Index of feature. Range: 0 to num_features - 1.
 * @returns             Float of feature
*/
float Detectors::get(short detector, short feature) {
    return detectorsArray_[detector*num_features + feature];
}

/**
 * @brief               Scales all features of incoming network request. Modelled after sklearn StandardScaler().
 * @param request       Array of features of incoming network request.
 * @param cap           Capacity of network request feature array.
 * @returns             Scaled features array
*/
float* scaler(float request[], short cap) {

    // Hardcoded Mean and Standard Deviation
    // Get from StandardScaler() in Kaggle notebook
    double mean[5]{8.3174376e+07, 7.6577203e+04, 1.3122589e+01, 3.8331108e+01, 1.8200844e+02};
    double std_dev[5]{2.9057796e+14, 2.1220093e+11, 7.4516273e+01, 1.0547730e+05, 2.7419119e+05};  

    for (short i{0}; i < cap; i++) {
        request[i] = (request[i] - ((float) mean[i]))/ ((float) std_dev[i]);
    }

    return request;
}


/**
 * @brief              Absolute value function
*/
float abs(float x) {
    if (x < 0) {
        return -x;
    }
    return x;
}

/**
 * @brief               Predicts if cyberattack or benign
 * @param attack        Feature array from incoming network request
 * @param D             Class holding detectors
 * @returns             True if Attack
*/
bool psa(float attack[], Detectors D) {
    float r{3.5}; //Hardcoded radius value
    float dist{0.0};
    
    float* scaled_attack = scaler(attack, D.get_num_feats());
    for (unsigned int d{0}; d < D.get_num_dtrs(); d++) {
        dist = 0.0;
        for (short f{0}; f < D.get_num_feats(); f++) {
            dist += abs(scaled_attack[f] - D.get(d, f));
        }
        if (dist < r) {
            return false;
        }
    }

    return true;
}

/**
 * @brief               Tests PSA on dummy attack vector
*/
int main() {

    while (true) {
        Detectors D;    
    
        float dummy_attack_vector[5];
        for (short i{0}; i < D.get_num_feats(); i++) {
            dummy_attack_vector[i] = (float) i;
        }

        bool is_attack = psa(dummy_attack_vector, D);

    }

    return 0;
}