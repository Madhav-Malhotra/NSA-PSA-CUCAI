/**
 * @author: Akira Yoshiyama
 * @date: 28/02/2024
 * @description: Positive Selection Algorithm for Network Attack Detection with 100 detectors
*/

/**
 * Params to be hardcoded by user:
 *      Class Detectors: num_detectors, num_features, array_ capacity, array_
 *      float* scaler(): mean, std_dev, mean length, std_dev length
 *      bool psa(): radius
 *      int main(): dummy attack vector length
*/

/** 
 * @brief       Interface for detectors array
*/
class Detectors {
    public:
        Detectors();
        ~Detectors();
        float get(short, short);
        unsigned short get_num_dtrs() {
            return num_detectors;
        }
        unsigned short get_num_feats() {
            return num_features;
        }

    private:
        // Harcoded
        unsigned short num_detectors{100};
        unsigned short num_features{5};
        // num_detectors * num_features
        float detectorsArray_[500]{-4.877585, 1.5285263, -0.18833688, 2.3233917, -0.13759369, -4.877585, -0.13295996, 0.6454465, 0.140112, 0.25502965, 4.8897214, 4.1807976, 5.158066, 5.7291856, 5.294013, 4.889798, 1.1483201, 4.026637, 1.8306911, 6.672574, -4.877585, 0.21966167, 2.0502243, 0.46652618, 2.0646765, 4.889929, -0.15543094, 0.16641016, 0.007698695, 0.65374607, 4.890018, 2.0355637, 0.04948154, 2.8899975, 0.4618138, -4.877585, 1.5996264, 5.6476517, 2.154026, 5.8454375, -4.877585, 7.5090065, 1.3960024, 10.5576515, 1.9854664, -4.877585, 1.9827611, 5.7199116, 2.7976162, 14.668228, 4.889559, 0.5148577, 2.622767, 0.98694134, 2.5368907, 4.889612, 2.8209956, 1.5525664, 4.0262885, 4.225438, -4.877585, 0.62597847, -0.100398086, 1.6305314, -0.121599324, -4.877585, -0.038105085, 0.2707425, 1.2394505, 0.37841463, -4.877585, 3.519608, -0.16939862, 5.2641993, -0.20499846, -4.877585, -0.10625286, 0.5907769, 0.4788437, 0.1613484, -4.877585, 1.3469797, -0.18891203, 1.5258327, -0.22023119, 4.8899035, 1.9089228, -0.12119562, 5.5013113, -0.039723467, 4.889738, 1.7961485, 1.9866432, 2.8592038, 2.5368907, -4.877585, 2.2583652, -0.063502364, 4.7407045, -0.07818607, 4.8897834, -0.03467079, 3.0186312, 0.6174158, 2.4988089, 4.8898864, 0.9746925, -0.10013412, 4.823848, -0.082375094, 4.8897843, 7.6460996, 3.7957582, 9.830918, 5.294013, 4.889994, 2.3817298, -0.015556702, 4.405052, 0.033393573, -4.877585, -0.1641388, 0.19953811, -0.09392082, -0.010781307, -4.877585, -0.090341404, -0.059540965, 0.6482096, -0.11760074, 4.8897147, -0.1533064, 0.20779797, -0.11855585, 0.31100985, -4.877585, 2.6716435, 0.20139639, 4.580577, 0.06385901, -4.877585, 0.049965493, 0.25773153, 1.6613252, 0.11565025, -4.877585, 1.023501, 3.6783862, 1.6859603, 4.5696974, -4.877585, -0.15144336, -0.23135275, 0.010778074, -0.1440676, 4.8896575, 6.026733, 5.106761, 8.525261, 13.565379, 4.889958, 0.1359634, 1.4352778, 0.8699249, 6.3088927, -4.877585, 6.3023434, 7.2200775, 4.3003535, 7.2239985, 4.889956, 2.5947578, 3.829139, 4.201813, 8.051135, -4.877585, 1.8415335, 3.3702328, 2.5112338, 3.3640275, 4.8895364, 1.741068, 0.44822678, 3.4319685, 0.56501544, 4.8894696, -0.16486931, -0.17752756, -0.10315896, -0.18138775, -4.877585, -0.022107186, 0.25300765, 1.3564668, 0.007497967, 4.889524, -0.0873156, 2.1532202, 0.63589203, 5.621516, 4.889464, 0.022834767, 4.9324837, 0.69440025, 13.565379, 4.8896933, -0.12812082, 0.12272281, 0.16166766, 0.43230042, 4.889516, 4.1051326, 3.5602453, 6.2711563, 5.095988, 4.889986, 9.074007, 4.4002633, 13.04579, 8.051135, 4.889527, 2.6368208, 4.4865766, 4.2849565, 5.294013, 4.8899407, 0.5909396, 1.8339123, 1.1193546, 2.4835763, 4.8897324, 0.0014941472, 0.10295274, 1.6366903, 0.06385901, 4.889829, 2.2223687, 0.29228252, 4.5621004, 1.2421098, 4.889767, 0.26269305, 0.43121803, 4.4296875, 1.2059321, 4.890001, 1.4861909, 2.7139425, 2.6128535, 3.964197, -4.877585, 0.69413924, -0.042951778, 1.057767, -0.09418044, -4.877585, 0.38656762, 2.4734983, 0.72519404, 3.4603744, -4.877585, 0.25961104, 4.518256, 1.0793227, 4.87359, 4.8894596, -0.1441987, 1.6432111, 0.06928628, 5.0183005, 4.889898, 4.9933853, 0.1928981, 8.571452, 0.9340281, -4.877585, 2.8332133, -0.123627625, 4.3650203, -0.11112683, 4.8894606, 0.09165902, -0.25611898, -0.10315896, -0.19776292, 4.889802, 5.3460784, 0.16547294, 8.177292, 0.31957826, 4.88996, -0.062886484, 0.0068760593, 0.9838619, -0.03477285, -4.877585, -0.14286086, -0.028062403, 0.02617497, -0.031726293, -4.877585, 8.149886, -0.18891203, 10.7793665, -0.22023119, -4.877585, 3.595266, 3.4105878, 5.26112, 4.7829556, -4.877585, 0.16002291, 6.2773995, 0.29408097, 5.294013, -4.877585, 0.4358797, 0.72009146, 0.85760736, 0.27883077, 4.889514, -0.1579964, 0.083265714, -0.032333236, 0.04519892, 4.889766, 0.006739608, -0.021825587, 0.2910016, 0.103083275, -4.877585, 4.0322, 1.1482685, 5.2580404, 1.7247965, -4.877585, 1.5898725, 4.5883126, 2.2494867, 3.088315, 4.889965, 0.59061325, -0.026946481, 0.9992588, 0.11374616, 4.8897166, 10.828732, 4.4009247, 14.459225, 8.051135, 4.889735, 0.37884748, 0.21829876, 2.4681227, 0.41535395, -4.877585, 1.4480116, 4.129065, 1.3872606, 8.051135, -4.877585, 9.43876, 0.9397993, 13.147409, 1.9854664, -4.877585, 0.34339795, 4.760546, 0.39570045, 2.5368907, -4.877585, -0.11429287, 0.09298509, 0.32179537, -0.07932854, 4.889937, 2.9295747, 2.6981223, 4.158702, 5.294013, 4.889516, 3.6552854, 3.7815073, 5.214929, 7.754097, -4.877585, 1.0031416, 0.6852638, 1.6520871, 0.89861196, -4.877585, 4.6125503, -0.15445064, 6.394331, -0.15968113, 4.8895316, 0.73783845, 0.093156286, 1.7875798, 0.1975261, -4.877585, 4.9681115, 4.664804, 7.0625563, 5.095988, -4.877585, 2.4720416, 3.3752303, 3.5643818, 3.5011218, -4.877585, 0.79239166, -0.1769774, 0.6420508, -0.058764365, 4.889741, -0.13431726, 0.3226571, -0.0662064, 0.39669392, 4.8899126, -0.14923884, 0.28881267, 0.023095591, 0.88033277, -4.877585, 1.162777, 1.1410493, 1.6551665, 1.5591408, 4.8898735, -0.089291014, 1.9347366, 0.57430446, 8.051135, -4.877585, 1.2751945, 0.61529773, 2.8314893, 1.488499, 4.8899446, 0.49193722, 0.205176, 1.1409103, 0.8041692, -4.877585, 3.356171, 0.8585209, 4.6052117, 0.75142586, 4.8899193, 1.7669797, 4.104804, 3.241047, 8.051135, 4.8898807, 11.812254, 2.6707647, 16.12209, 5.294013, 4.8895025, -0.14062823, 0.2705053, -0.056968268, 1.223069, -4.877585, 12.18375, 4.918329, 16.750282, 5.294013, 4.8896723, 0.9020298, -0.19151755, 1.6151346, -0.22023119, 4.8894753, -0.05156995, -0.00714931, 0.2910016, 0.06157411, -4.877585, 1.6611693, 0.2511134, 2.8006957, 0.09794223, -4.877585, 0.89322686, 2.3761358, 1.6859603, 2.5368907, 4.889988, 10.394482, 3.169426, 14.674782, 8.3799715, 4.889556, 0.24158368, 4.203489, 0.611257, 5.294013};
};

/**
 * @brief               Empty constructor for Detectors class.
*/
Detectors::Detectors() {
}

/**
 * @brief               Destructor for Detectors class. Sets num_detectors = num_features = 0.
*/
Detectors::~Detectors() {
    num_detectors = 0;
    num_features = 0;
}

/**
 * @brief               Read one feature value from one detector.
 * @param detector      Index of detector. Range: 0 to num_detectors - 1.
 * @param feature       Index of feature. Range: 0 to num_features - 1.
 * @returns             Float of feature
*/
float Detectors::get(short detector, short feature) {
    return detectorsArray_[detector*num_features + feature];
}

/**
 * @brief               Scales all features of incoming network request. Modelled after sklearn StandardScaler().
 * @param request       Array of features of incoming network request.
 * @param cap           Capacity of network request feature array.
 * @returns             Scaled features array
*/
float* scaler(float request[], short cap) {

    // Hardcoded Mean and Standard Deviation
    // Get from StandardScaler() in Kaggle notebook
    double mean{8.3157144e+07};
    double std_dev{2.9066282e+14};  

    for (short i{0}; i < cap; i++) {
        request[i] = (request[i] - ((float) mean))/ ((float) std_dev);
    }

    return request;
}


/**
 * @brief              Absolute value function
*/
float abs(float x) {
    if (x < 0) {
        return -x;
    }
    return x;
}

/**
 * @brief               Predicts if cyberattack or benign
 * @param attack        Feature array from incoming network request
 * @param D             Class holding detectors
 * @returns             True if Attack
*/
bool psa(float attack[], Detectors D) {
    float r{3.5}; //Hardcoded radius value
    float dist{0.0};
    
    float* scaled_attack = scaler(attack, D.get_num_feats());
    for (unsigned int d{0}; d < D.get_num_dtrs(); d++) {
        dist = 0.0;
        for (short f{0}; f < D.get_num_feats(); f++) {
            dist += abs(scaled_attack[f] - D.get(d, f));
        }
        if (dist < r) {
            return false;
        }
    }

    return true;
}

/**
 * @brief               Tests PSA on dummy attack vector
*/
int main() {

    while (true) {
        Detectors D;    
    
        float dummy_attack_vector[5];
        for (short i{0}; i < D.get_num_feats(); i++) {
            dummy_attack_vector[i] = (float) i;
        }

        bool is_attack = psa(dummy_attack_vector, D);

    }

    return 0;
}