/**
 * @author: Akira Yoshiyama
 * @date: 28/02/2024
 * @description: Positive Selection Algorithm for Network Attack Detection with 100 detectors
*/

/**
 * Params to be hardcoded by user:
 *      Class Detectors: num_detectors, num_features, array_ capacity, array_
 *      float* scaler(): mean, std_dev, mean length, std_dev length
 *      bool psa(): radius
 *      int main(): dummy attack vector length
*/

/** 
 * @brief       Interface for detectors array
*/
class Detectors {
    public:
        Detectors();
        ~Detectors();
        float get(short, short);
        unsigned short get_num_dtrs() {
            return num_detectors;
        }
        unsigned short get_num_feats() {
            return num_features;
        }

    private:
        // Harcoded
        unsigned short num_detectors{100};
        unsigned short num_features{5};
        // num_detectors * num_features
        float detectorsArray_[500]{4.462476240543184, 10.785212895452595, 6.005201185180679, 22.63938782229521, 15.898791725059228, 4.46059297231987, 15.612997500663619, 10.12469102770595, 2.5923762968481747, 13.258216451862351, 7.564679281925369, 8.221423224474904, 11.470405271898287, 9.358483402028567, 15.575643767151371, 6.810647290250222, 14.366880652051607, 3.964941377605139, 22.61302073597914, 4.916994129655974, 3.472174018151516, 13.96419288470773, 11.502204557783973, 24.04218609675985, 2.3298225798713093, 2.6929700093875795, 13.078829118814024, 9.476646478026737, 7.087915174757164, 26.545924580949745, 0.318840088927188, 13.904515676485875, 7.305419793877716, 1.6296684440473377, 53.90758741367312, 5.493505362090286, 16.23077352339339, 4.453543947116756, 15.62067505665949, 13.521289144760434, 3.7552950144744095, 5.157703389696361, 11.644435280418493, 23.444541024599907, 36.420044807207354, 7.440019019209367, 8.598419542555542, 9.421209023917722, 10.967240008885696, 35.63734683503251, 4.142555691761089, 10.807910123523511, 12.466545187911949, 8.78584435626704, 17.137062171789218, 7.341983768762746, 0.1638906160500304, 5.672732209982399, 16.759229684249522, 29.937496406333313, 3.8071304080248924, 12.802466041883543, 10.466608080339583, 21.610516578664427, 32.75709832032841, 8.805117679532778, 20.79076978467885, 11.771916383824676, 0.5740171515500003, 49.276445359547374, 9.487439066069978, 8.22863750650133, 0.4886232885553231, 1.653408031081634, 38.28983121296979, 7.810776614146916, 15.530648370343297, 6.375517571378382, 12.138300674052214, 9.281305705752091, 6.009046311360525, 16.302993841079466, 3.852834150206744, 10.22346764995605, 26.481874224718148, 6.080575247502627, 4.147091580886009, 2.889898013344429, 14.96209876719944, 20.881552903027057, 8.753268663043537, 14.738473083831728, 2.258725605516402, 9.488678773249799, 51.65712361414309, 3.2319982317421947, 4.4098280285668645, 12.646399954567144, 25.688899309954337, 47.83790935223134, 2.9524804153171336, 7.085204739483718, 12.206789627090632, 2.0325692162052973, 32.97898913056437, 1.6138724315801019, 9.23123308554406, 4.940705179856438, 0.47683568740786697, 29.879625264264075, 0.8740372572137718, 7.720177663890506, 2.789240602645819, 0.19357148335454294, 32.37070168737935, 5.462440036315229, 2.0096462046525096, 7.386727610878144, 22.61958449076258, 38.66375826353422, 0.8837154448206672, 2.6183830161440045, 13.249834455940071, 14.090235951189658, 25.399247804624757, 3.0053053977223394, 20.810580430591898, 9.906965938247748, 3.4076511650540766, 31.096057223556873, 9.767025482284234, 8.23283077919982, 9.410962085283504, 8.021217245038159, 6.7702671957190566, 2.7791362974438947, 18.711897067222363, 2.4959525687032107, 24.03224007640141, 52.68134709772655, 7.473746114797064, 5.41602051721169, 12.573502918329789, 12.162036594099638, 7.62651540522037, 8.461192482540024, 0.9876852963218434, 5.852849235147409, 0.8010301878222724, 51.5995718579747, 4.642660053788449, 14.418303309357269, 4.251155080124501, 1.4956115633718758, 4.986151620812477, 7.842556279933524, 20.746811546379586, 2.3150616533469255, 25.704767016030686, 56.011408126949476, 4.392511775026933, 15.5014769544608, 8.858142377061233, 22.276567849497255, 53.239353912074804, 4.832589499967487, 20.616486473376828, 3.883552458478495, 20.032256504825114, 24.030980791354533, 8.09009797602124, 20.70090343374933, 1.0041852326575418, 5.24016857868115, 53.73037152934891, 3.8725754793432103, 3.156942217373504, 6.116105464794748, 13.16262814068767, 49.862695309026904, 2.0803542109270725, 20.379225721220255, 5.250595256982099, 25.659348743631163, 44.21529913161927, 3.1187491133583563, 12.570138149373392, 6.923798641299068, 14.488129965722695, 22.582223811477935, 4.864020263198008, 16.26412692296839, 0.5373232252843732, 22.807994205215522, 14.04129167342675, 6.32646906237714, 8.770896489336202, 9.206764023664942, 9.237926599375122, 16.218400242187524, 5.820100044901767, 4.315436054018663, 1.9422369078187276, 15.169967510257981, 7.181812529962318, 4.360728448792571, 6.400988222783041, 6.115817670848743, 4.780859707227078, 27.978846017409612, 7.752362479468705, 0.5451597251231968, 2.1455834506623055, 21.603141005895665, 12.005552711064446, 4.655804389953293, 9.272867926582075, 7.03893930753068, 9.3818967867749, 45.484945795350725, 5.311992799026196, 9.039542664630638, 7.534477036890865, 25.302159784361063, 7.869984702063988, 1.2093926838025868, 17.759839988969407, 7.26685642735062, 5.390008663066753, 55.75493002093623, 1.9229123366224343, 2.611567529358988, 9.475557270587952, 3.2218660866111875, 12.668505193546832, 1.631631982109046, 6.343035225541889, 0.6889946654490797, 9.476481684591999, 51.719555487640186, 9.541926449238526, 5.5542215819937315, 10.35872275039877, 7.8254072357283215, 29.31981446541351, 4.218427724125325, 4.926507180027144, 5.028680772451751, 24.29350374265479, 25.4206149253206, 4.167898135735715, 13.386982808117617, 9.688265107486698, 9.234662077409123, 47.68408460297292, 3.7517569620468634, 12.838379605442215, 5.535734786266999, 21.887291988207693, 42.18432837927582, 2.581204802215726, 18.124085473379168, 4.023103981975922, 4.581415272224047, 6.830117368959655, 7.524262991062621, 11.114308731294699, 1.953148497176093, 4.597228642006732, 12.309055814122125, 5.358743322683294, 0.9554538431024946, 4.810346158402538, 12.209260730705987, 52.80322923475986, 6.936210293736264, 14.341270109227517, 5.801386058309167, 17.680668956865553, 3.9190413680471394, 4.231118492565254, 7.43659593337047, 7.248844932345612, 1.8317527055897502, 26.11632386763924, 1.63707663082363, 6.027462992353093, 8.239403234966112, 6.675276634141314, 5.326576219731624, 0.36945347671159595, 0.6941102549371625, 3.735139458492777, 16.581300563300317, 50.76205491106038, 9.380504062051699, 9.369283601349357, 13.65690150641914, 3.6611183613628113, 34.12220585207382, 9.628950421852657, 6.481420430071397, 1.5955378334063963, 13.472383546680156, 25.259421050868802, 7.763310024568313, 5.486277645201389, 0.7190356952464908, 23.743669783528052, 8.641253499718525, 7.040965776410959, 3.9931872705943294, 8.086536514284115, 17.622324613517133, 33.778655377770505, 5.251046400767492, 15.22053686910903, 4.257937476446052, 6.920038597853031, 19.075781493774738, 5.989216637904113, 12.679364911521063, 4.989151923279643, 23.890108273777592, 44.88396707473594, 0.988722238827488, 18.227581421242018, 3.8233604357130844, 0.9819116645537526, 5.129376443836097, 6.161735200046976, 17.460953515361705, 13.356283708978376, 11.066839459075798, 4.859190063706668, 6.196508466395571, 12.985096784318895, 3.3207331460287883, 19.02576527224946, 22.960050932847384, 0.810409881368916, 16.815839458457972, 1.7746634951314868, 17.440583725356824, 38.340100862516245, 3.262105677599464, 20.081751996135832, 7.679673338887324, 14.888609784011267, 36.31166214093218, 2.8823076683060065, 13.321480859620694, 5.8406562819345655, 1.3195412894933516, 13.186461297015267, 2.390987927292238, 8.004732966673268, 6.24029080182316, 23.795063736885396, 37.573756584234914, 1.749290731929755, 9.877714237473706, 9.733187434896138, 19.424214165448063, 50.83532408510225, 0.37107433328348005, 10.118052805664025, 6.941542928178652, 25.297284723491103, 8.938229279111408, 1.5237698281237517, 12.190340433001566, 10.119520561303775, 8.746558798700955, 20.17574545179286, 5.761214661597358, 4.716941376080709, 7.0484887607185165, 8.101739680588567, 39.28740525789548, 1.7214905295019354, 2.067279836549233, 10.462111861706784, 13.285402331647873, 39.32748615458964, 1.5905604233129453, 7.183192250330876, 9.335695364219378, 10.041246334188633, 41.88992860740538, 8.353569609136903, 9.13174867421705, 5.602806883960468, 5.402014100302984, 46.76609355660917, 1.481937341504144, 4.435403322163428, 9.178667220277793, 18.493429619899143, 21.883284373650724, 5.320184402997076, 12.751021863787864, 10.0287011786701, 5.024797266606159, 51.00785062545449, 8.703889023248298, 0.3191238051079903, 7.635391220331901, 5.0429344374134555, 29.6458646857871, 6.239019330585882, 0.34680889838682766, 5.96750928003451, 2.9625069532973876, 30.799461809590714, 4.874021056876872, 19.03976657266359, 9.81262232044264, 18.090855299954747, 18.87465854885533, 5.814061733433454, 16.54271521610077, 3.9367047196358684, 16.58767158449945, 33.62586387860928, 5.3627457841716435, 13.430607390112895, 6.42401156539265, 11.086242217055013, 2.1141274882330277, 6.22000099567518, 1.3995609427966305, 4.208927582436149, 4.425980595994649, 50.123779267833044, 5.375777079204016, 17.53278327467328, 4.510300932645534, 5.114089841757954, 18.505136249201144, 7.978343730990764, 9.09508726010366, 10.681090003024334, 24.05102016811149, 30.479855145296668, 4.6005374914085735, 0.6956084728509921, 6.323555456341654, 14.607989789900794, 6.8245534877612934, 6.318438630585847, 17.986697264384627, 7.343720159079579, 9.99002053167771, 11.637217606861231, 5.017239662005991, 11.717320395794898, 12.886121142396533, 24.206759775017055, 7.4363052691458735, 7.635215767121141, 11.147738319810133, 12.058753413423789, 13.824129787688573, 54.55732886583852, 2.250585107491495, 20.246909890747443, 6.316068009346289, 19.619743902913413, 30.78957798048382, 6.597943012883036, 0.6366244748165287, 7.3687153082806285, 10.976643277532776, 28.072276235060844, 2.641294183295277, 7.929199716052326, 1.5835176100738972, 25.52502148226754, 51.75679345972747, 2.177184131936958, 4.8523110621940475, 1.9947616581234662, 3.0313113292375027, 29.312282861139117, 2.0367558802409653, 5.229696823337922, 7.829905473525988, 9.373780987662366, 37.20948630006587, 1.76284601560443, 20.659116089825588, 4.162066163086485, 13.467091077706824, 8.845248299285176, 1.2808760425715462, 16.902283576079586, 9.055124634291458, 24.34136540731543, 24.492165694222525};
};

/**
 * @brief               Empty constructor for Detectors class.
*/
Detectors::Detectors() {
}

/**
 * @brief               Destructor for Detectors class. Sets num_detectors = num_features = 0.
*/
Detectors::~Detectors() {
    num_detectors = 0;
    num_features = 0;
}

/**
 * @brief               Read one feature value from one detector.
 * @param detector      Index of detector. Range: 0 to num_detectors - 1.
 * @param feature       Index of feature. Range: 0 to num_features - 1.
 * @returns             Float of feature
*/
float Detectors::get(short detector, short feature) {
    return detectorsArray_[detector*num_features + feature];
}

/**
 * @brief               Scales all features of incoming network request. Modelled after sklearn StandardScaler().
 * @param request       Array of features of incoming network request.
 * @param cap           Capacity of network request feature array.
 * @returns             Scaled features array
*/
float* scaler(float request[], short cap) {

    // Hardcoded Mean and Standard Deviation
    // Get from StandardScaler() in Kaggle notebook
    double mean[5]{8.3174376e+07, 7.6577203e+04, 1.3122589e+01, 3.8331108e+01, 1.8200844e+02};
    double std_dev[5]{2.9057796e+14, 2.1220093e+11, 7.4516273e+01, 1.0547730e+05, 2.7419119e+05};  

    for (short i{0}; i < cap; i++) {
        request[i] = (request[i] - ((float) mean[i]))/ ((float) std_dev[i]);
    }

    return request;
}


/**
 * @brief              Absolute value function
*/
float abs(float x) {
    if (x < 0) {
        return -x;
    }
    return x;
}

/**
 * @brief               Predicts if cyberattack or benign
 * @param attack        Feature array from incoming network request
 * @param D             Class holding detectors
 * @returns             True if Attack
*/
bool psa(float attack[], Detectors D) {
    float r{3.5}; //Hardcoded radius value
    float dist{0.0};
    
    float* scaled_attack = scaler(attack, D.get_num_feats());
    for (unsigned int d{0}; d < D.get_num_dtrs(); d++) {
        dist = 0.0;
        for (short f{0}; f < D.get_num_feats(); f++) {
            dist += abs(scaled_attack[f] - D.get(d, f));
        }
        if (dist < r) {
            return false;
        }
    }

    return true;
}

/**
 * @brief               Tests PSA on dummy attack vector
*/
int main() {

    while (true) {
        Detectors D;    
    
        float dummy_attack_vector[5];
        for (short i{0}; i < D.get_num_feats(); i++) {
            dummy_attack_vector[i] = (float) i;
        }

        bool is_attack = psa(dummy_attack_vector, D);

    }

    return 0;
}