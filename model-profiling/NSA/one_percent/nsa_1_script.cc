/**
 * @author: Akira Yoshiyama
 * @date: 28/02/2024
 * @description: Positive Selection Algorithm for Network Attack Detection with 100 detectors
*/

/**
 * Params to be hardcoded by user:
 *      Class Detectors: num_detectors, num_features, array_ capacity, array_
 *      float* scaler(): mean, std_dev, mean length, std_dev length
 *      bool psa(): radius
 *      int main(): dummy attack vector length
*/

/** 
 * @brief       Interface for detectors array
*/
class Detectors {
    public:
        Detectors();
        ~Detectors();
        float get(short, short);
        unsigned short get_num_dtrs() {
            return num_detectors;
        }
        unsigned short get_num_feats() {
            return num_features;
        }

    private:
        // Harcoded
        unsigned short num_detectors{100};
        unsigned short num_features{5};
        // num_detectors * num_features
        float detectorsArray_[500]{4.8476608131387415, 13.409141998625552, 2.9598273633473617, 17.672518727123144, 4.825814657705442, 8.668291458679255, 6.5975968830068945, 4.929792152562508, 24.11637645118708, 28.033605157956764, 6.153091780670817, 13.502564032223157, 6.797330924897007, 5.361106873285204, 16.741050361526085, 4.6853120690586145, 17.133913412806717, 11.10245186345947, 16.28722545971966, 19.829439699974856, 5.448989274942423, 11.607912611110379, 0.5744059897881667, 20.228147133723198, 30.54582432262252, 4.888926265298867, 16.82941445681347, 4.74626832486957, 14.487392035099848, 10.316346251569025, 8.0259613794885, 8.528996657960244, 11.63977085362592, 17.706282980238683, 0.4621645729915167, 9.52996208476999, 15.435351650898362, 7.632128982861601, 8.226095632285189, 12.139454771748145, 8.434270126851867, 3.9561761934470354, 2.3876521493766734, 9.237756244513303, 32.303950228358694, 7.911266214779289, 4.898830333703716, 4.212762549781924, 10.89795967314295, 25.834381617207058, 2.878498798260394, 5.123214395971169, 3.0114829375073326, 1.2734420120786318, 2.97691880283427, 1.702972050934919, 11.954844536957193, 0.6787942679056784, 0.13214561849578088, 20.123156796382613, 6.106555566573938, 2.5636730276516353, 10.697982406979419, 18.866834932801606, 15.126593440476913, 0.10601067894622643, 3.699964314835975, 5.1049543703140685, 1.051594892679197, 14.159767424890312, 6.679842240361004, 15.62552845140306, 7.143839238467741, 2.185031559592893, 17.353228788656814, 0.5325298602968995, 5.864382578114636, 2.437833297996894, 11.407133763761907, 14.322279365316042, 6.951620983604287, 10.49259158491676, 4.561352368495144, 24.52140621783046, 5.481542894799683, 3.2158214810323402, 0.15301370308969411, 4.780646716189092, 5.873101685161389, 32.52066643600897, 8.690954377409165, 3.2138838206977614, 2.5258491186734093, 20.054958211806397, 0.38527146909132226, 8.083474869596886, 11.149854486380132, 1.9752357790545338, 15.831162138789196, 6.865766072551101, 7.053860886073975, 14.691419814282845, 9.258208947325958, 12.285425283510543, 0.7005637925612068, 7.275133432850739, 2.032209674964275, 8.41665320876304, 5.7866591915614025, 32.630300637896866, 1.8972608914681486, 8.888533506582876, 9.334483408057878, 16.08893709692461, 26.190415889739555, 4.834631744750217, 11.980455734000506, 4.325263501846914, 22.01239893627349, 23.672330272969507, 3.672989314522447, 7.339893966517568, 11.04846972701749, 0.669527934046557, 22.403871345143575, 7.386592625261152, 14.322831876666907, 11.456973663649418, 10.911310414599741, 7.334601285528808, 6.923755933370726, 3.4899344815834117, 8.33295182917922, 11.829573238324006, 32.428177093065536, 5.902170728277662, 8.625248940138842, 5.2743699292184, 15.994398275835854, 9.296529870943514, 6.642667704436593, 10.920408206052473, 2.340111179724589, 3.6246295469746816, 2.8508170702543074, 7.706782962352652, 9.567797638830974, 1.118256612392178, 21.130273413253736, 23.696359126437933, 8.90539153995751, 14.584432703975436, 0.9675491136608124, 0.4672749015253044, 30.447759859772656, 3.632770409054271, 0.6682212437592107, 1.1329154895129867, 14.12154591446617, 25.481005427219173, 9.666766117813157, 4.432293878790451, 8.931555518401213, 10.766857150983427, 2.8287596386478264, 3.851561026259765, 14.83614351851992, 10.78490875569257, 2.518561203613309, 8.153242172723763, 1.2044849108835138, 4.820703751723734, 0.34377589049528917, 18.740918692480236, 27.012040150482402, 5.875331478789371, 10.558861693599068, 4.868917939435539, 16.472956187919383, 22.924211256358028, 1.1113763690106682, 3.9455392140888326, 6.810207452028886, 20.76521869617278, 10.040943715387154, 3.5949815490837, 6.193604069364094, 5.220513643485847, 22.990443873220727, 28.22440833831914, 3.9587678525299563, 16.099536797787593, 5.50292721990054, 16.24754352463748, 27.154119121535793, 6.991932787207626, 5.797128153435404, 7.212321145314673, 1.1927744765026753, 26.420335408515346, 2.113259079137761, 12.034992487109479, 8.2496639451917, 19.93304845212011, 24.67384601242141, 3.4477542283264673, 15.568042084106313, 5.663876670191197, 2.2466208063045436, 0.06259650771641921, 0.22398117828345557, 0.9529331741962508, 2.9996060068375674, 2.8751984893833633, 29.55698252662774, 2.0232746594880924, 0.9199441598696614, 6.5071396833761455, 9.517232065131584, 10.87125605638524, 7.851800859781167, 2.0275952599358633, 3.541831049256285, 21.97146111061944, 7.704075337119007, 3.035272893025161, 12.812897984383998, 6.081915510618898, 3.7773790266012277, 24.194308408130546, 9.552797367266757, 8.945020307733575, 6.03843134414542, 16.190170820678137, 2.106146980703093, 1.096987681061398, 10.806542603564427, 6.6319587863749865, 21.14099485681269, 21.61553962612339, 8.735536054611197, 14.217927499639044, 7.683688550382662, 3.885462995815627, 31.0787558601166, 6.931757182892176, 6.188668279420788, 9.553316540491316, 9.683577327174024, 7.328190970888899, 1.9338400610213284, 2.974034814318824, 2.8870876045872285, 1.5775052600289305, 20.587770269376637, 8.968264403051377, 0.0037471425118382083, 4.201583339009326, 18.87387123807137, 5.050290616841079, 7.054206218739997, 17.5180183723743, 9.350875420930333, 18.93955483140391, 5.59608426596418, 6.8776776524359935, 7.399596727532381, 2.6062820087424914, 22.534771114591056, 32.112253571635215, 9.739247805657213, 15.723248089547972, 10.424079216502104, 21.329231474335142, 31.604728902749606, 3.7823389382373347, 9.735598146305193, 7.728220766334641, 23.223124039963377, 1.6889555874357502, 6.867544279358136, 12.29200929339069, 4.464545770037364, 16.306196460088387, 30.159241356455123, 6.648232746818015, 3.9988504834101213, 11.18375285026194, 18.222950719181824, 19.634196711695502, 5.617719801796034, 2.6268058576686637, 7.115319471949888, 8.334622885835019, 21.004554707670515, 4.9021029972774315, 1.2715721010644612, 9.582824529432912, 8.53088991174316, 6.2298310607323595, 6.033802110295764, 14.73268510958215, 4.167255169012721, 20.427146544109526, 17.6004662165168, 9.409578168663097, 14.690561331518905, 3.075775883277835, 18.14302899262843, 19.52324269155982, 0.8733805368745288, 10.052284974476226, 3.8144416937235897, 20.577607328929965, 31.599680548373776, 0.6228028759029123, 0.8984282290158031, 3.5621219198988263, 13.795902852076, 14.001936953673823, 7.27330243883459, 7.116238794280127, 0.030412524596493094, 6.545203692753667, 32.9860833963993, 4.909185718087329, 5.191627318631007, 9.28773477866948, 17.37543693130376, 18.58154523564147, 8.883244882649127, 3.69166943575223, 0.6797837657104389, 0.3220853543375145, 21.117906102350947, 5.9382654668370725, 0.9171608225192075, 1.1872318664775314, 23.116698951896385, 5.00777639959676, 8.566334384551107, 0.31039600780294946, 10.480447807085202, 6.974983390892307, 22.910145698903808, 4.2391187035730304, 14.822779379701085, 9.859648443268394, 6.0319681721983995, 23.743628825057275, 9.543921936201345, 10.514885276113738, 7.475818376525854, 17.194264074764668, 22.521114373264556, 6.155405887555862, 4.781173280179067, 11.049371195401458, 2.9487813193880505, 14.327206984102501, 4.055317184703224, 5.831298337296987, 9.027691793371035, 9.353577314624747, 22.00170143810971, 5.386210337626727, 8.052309241858314, 5.381838498423391, 6.718800989513275, 10.439404771344307, 2.555466243246094, 17.88585549172601, 11.50867374551969, 19.473064719214634, 15.061293291227546, 1.5745745010583703, 3.0680641310954484, 11.59497167732035, 6.619204888422074, 15.544336969529942, 1.225762990680719, 10.218801739602904, 6.2686696133289015, 23.230971899256033, 29.975637457235464, 6.968981058001779, 17.706326561315212, 9.735256228484804, 7.823653013851533, 13.27752668004851, 7.914293531989285, 8.923376550377071, 7.185596260867042, 17.359211959731613, 2.4599917155333726, 5.754223851310775, 4.387217600996547, 9.18695680911233, 16.407359636142967, 21.18956090318227, 4.598480987863543, 17.18765224268048, 10.27804840838943, 2.981683736737846, 14.434701358708889, 4.1524644077481465, 5.501888721105013, 10.672801407636966, 18.60370280612112, 4.268406578439932, 3.080926310907277, 13.4750616270761, 4.362247796682982, 12.874603941741842, 20.007581333063897, 0.7463116326839809, 6.998889002664189, 6.947594479479854, 8.720681429595231, 21.686678163019536, 7.970267439436041, 10.879761565047769, 4.144134781749161, 19.21113581093459, 19.097954261533737, 2.681468085088681, 14.651877449754556, 5.593505428900369, 0.17084353823913145, 3.4693630140409444, 0.6968852122912135, 10.538117431818163, 1.3897653107967929, 2.302827490874109, 34.55991935183695, 0.8230093399999485, 4.368828522387467, 0.9281143637698325, 3.1198763846316044, 31.378333694357888, 7.034615014361486, 0.8971614224464062, 11.347005186413142, 1.7955776810333124, 31.740213409933776, 8.438562250374305, 15.777167935320664, 9.576531312969765, 5.454103731899233, 2.624455872298914, 1.6717645181219458, 3.256962869039183, 1.7532944361936496, 16.724800359336275, 33.87355251955935, 1.4686747422003352, 16.461138480502292, 3.5842682137813195, 12.915247716651248, 3.1290098536771946, 8.763383489189962, 5.6434749203672965, 1.7533395200588844, 14.616092623340016, 2.578127050443605, 0.9616811299887734, 2.576449069944658, 11.086073963830101, 12.040736742570507, 1.1599120004437145, 2.584538365347895, 17.573664448497574, 5.080932807999856, 24.48512260354327, 0.8691513514291955, 0.48159279550496625, 7.359470789734349, 8.264999736584985, 7.934097196722234, 22.50271348403218, 7.657339293116309, 13.4304385001954, 9.35003241958928, 0.4554609457490665, 30.29451577883991, 5.250503303184533, 13.059456272593755, 7.8951554551629215, 18.268358390625014, 32.95673140260843, 8.501156119463927, 2.394360671218641, 8.90397322623112, 10.25830232334735, 17.91191559487963, 8.61326968231949, 8.677378531985351, 0.9159687364047462, 22.683240539924597, 34.18652410815883};
};

/**
 * @brief               Empty constructor for Detectors class.
*/
Detectors::Detectors() {
}

/**
 * @brief               Destructor for Detectors class. Sets num_detectors = num_features = 0.
*/
Detectors::~Detectors() {
    num_detectors = 0;
    num_features = 0;
}

/**
 * @brief               Read one feature value from one detector.
 * @param detector      Index of detector. Range: 0 to num_detectors - 1.
 * @param feature       Index of feature. Range: 0 to num_features - 1.
 * @returns             Float of feature
*/
float Detectors::get(short detector, short feature) {
    return detectorsArray_[detector*num_features + feature];
}

/**
 * @brief               Scales all features of incoming network request. Modelled after sklearn StandardScaler().
 * @param request       Array of features of incoming network request.
 * @param cap           Capacity of network request feature array.
 * @returns             Scaled features array
*/
float* scaler(float request[], short cap) {

    // Hardcoded Mean and Standard Deviation
    // Get from StandardScaler() in Kaggle notebook
    double mean[5]{8.3157144e+07, 7.6943680e+04, 1.3118273e+01, 3.8499920e+01, 1.8166219e+02};
    double std_dev[5]{2.9066282e+14, 2.1407808e+11, 7.4370697e+01, 1.0545658e+05, 2.7581962e+05};  

    for (short i{0}; i < cap; i++) {
        request[i] = (request[i] - ((float) mean[i]))/ ((float) std_dev[i]);
    }

    return request;
}


/**
 * @brief              Absolute value function
*/
float abs(float x) {
    if (x < 0) {
        return -x;
    }
    return x;
}

/**
 * @brief               Predicts if cyberattack or benign
 * @param attack        Feature array from incoming network request
 * @param D             Class holding detectors
 * @returns             True if Attack
*/
bool psa(float attack[], Detectors D) {
    float r{3.5}; //Hardcoded radius value
    float dist{0.0};
    
    float* scaled_attack = scaler(attack, D.get_num_feats());
    for (unsigned int d{0}; d < D.get_num_dtrs(); d++) {
        dist = 0.0;
        for (short f{0}; f < D.get_num_feats(); f++) {
            dist += abs(scaled_attack[f] - D.get(d, f));
        }
        if (dist < r) {
            return false;
        }
    }

    return true;
}

/**
 * @brief               Tests PSA on dummy attack vector
*/
int main() {

    while (true) {
        Detectors D;    
    
        float dummy_attack_vector[5];
        for (short i{0}; i < D.get_num_feats(); i++) {
            dummy_attack_vector[i] = (float) i;
        }

        bool is_attack = psa(dummy_attack_vector, D);

    }

    return 0;
}